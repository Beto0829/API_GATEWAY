// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notas.Server.Models;

#nullable disable

namespace Notas.Server.Migrations
{
    [DbContext(typeof(MiDbContext))]
    [Migration("20240524215501_APINOTAS")]
    partial class APINOTAS
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Notas.Server.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            Nombre = "Sin categoria"
                        },
                        new
                        {
                            Id = 2,
                            Email = "admin@gmail.com",
                            Nombre = "Ejercicio"
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin@gmail.com",
                            Nombre = "Diario"
                        },
                        new
                        {
                            Id = 4,
                            Email = "admin@gmail.com",
                            Nombre = "Recetas"
                        },
                        new
                        {
                            Id = 5,
                            Email = "admin@gmail.com",
                            Nombre = "Pendientes"
                        },
                        new
                        {
                            Id = 6,
                            Email = "admin@gmail.com",
                            Nombre = "Compras pendientes"
                        },
                        new
                        {
                            Id = 7,
                            Email = "admin@gmail.com",
                            Nombre = "Comandos .Net"
                        });
                });

            modelBuilder.Entity("Notas.Server.Models.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Notas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Hoy me senti muy bien fui por helado y luego comi pizza",
                            Fecha = new DateTime(2024, 5, 24, 16, 55, 0, 649, DateTimeKind.Local).AddTicks(5077),
                            IdCategoria = 3,
                            Titulo = "Dia 16"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Realizar 5 repeticiones con 40 segundos de descanso entre repeticiones",
                            Fecha = new DateTime(2024, 5, 24, 16, 55, 0, 649, DateTimeKind.Local).AddTicks(5141),
                            IdCategoria = 2,
                            Titulo = "Palanca"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Hacer 45 repeticiones minimo diario sobre la barra",
                            Fecha = new DateTime(2024, 5, 24, 16, 55, 0, 649, DateTimeKind.Local).AddTicks(5169),
                            IdCategoria = 2,
                            Titulo = "Barra"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Pollo, panco, aceite, pimienta, chipotle, salsa de ajo, perejil",
                            Fecha = new DateTime(2024, 5, 24, 16, 55, 0, 649, DateTimeKind.Local).AddTicks(5196),
                            IdCategoria = 4,
                            Titulo = "Milanesa"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Pastas, Pollo, crema de champiñones, pimenton, cebolla, pimienta, salsa, leche y crema de leche",
                            Fecha = new DateTime(2024, 5, 24, 16, 55, 0, 649, DateTimeKind.Local).AddTicks(5224),
                            IdCategoria = 4,
                            Titulo = "Pastas en salsa de champiñones"
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Arina, levadura, pasta de tomate",
                            Fecha = new DateTime(2024, 5, 24, 16, 55, 0, 649, DateTimeKind.Local).AddTicks(5253),
                            IdCategoria = 4,
                            Titulo = "Masa de pizza"
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "add-migration (nombredelamigracion; update-database;)",
                            Fecha = new DateTime(2024, 5, 24, 16, 55, 0, 649, DateTimeKind.Local).AddTicks(5279),
                            IdCategoria = 7,
                            Titulo = "Migrar BD"
                        });
                });

            modelBuilder.Entity("Notas.Server.Models.Nota", b =>
                {
                    b.HasOne("Notas.Server.Models.Categoria", "Categoria")
                        .WithMany("Notas")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Notas.Server.Models.Categoria", b =>
                {
                    b.Navigation("Notas");
                });
#pragma warning restore 612, 618
        }
    }
}
